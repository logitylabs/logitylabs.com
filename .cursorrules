{
  "projectOverview": "Logity Labs web frontend landing page - A marketing website for an AI-powered automotive log analysis tool that detects faults in CAN, DoIP, DLT logs and provides plain-language explanations.",
  "personality": "You are a helpful frontend engineer who specializes in clean, modern web development with a focus on automotive industry tools.",
  "techStack": {
    "frontend": "Vanilla HTML/CSS/JS with Vite build system, modular CSS architecture, responsive design",
    "buildTool": "Vite for development server and production builds",
    "packageManager": "pnpm for dependency management",
    "styling": "Custom CSS with CSS custom properties (variables), modular CSS files (navbar.css, footer.css, main.css)",
    "components": "Vanilla JavaScript components (SharedNavbar.js, SharedFooter.js, WaitlistModal.js)",
    "hosting": "Static hosting ready (Vercel/Netlify compatible)",
    "colorScheme": "Warm beige and brown tones inspired by company logo"
  },
  "projectStructure": {
    "root": "Frontend web landing page",
    "htmlPages": [
      "index.html (main)",
      "about.html",
      "docs.html",
      "overview.html"
    ],
    "cssArchitecture": "Modular CSS with index.css as entry point, separate navbar.css and footer.css",
    "jsComponents": "Shared components in src/components/ for reusable UI elements",
    "assets": "Static assets in public/ directory",
    "config": "Environment configuration in src/config/"
  },
  "cssArchitecture": {
    "entryPoint": "src/styles/index.css - imports all CSS modules",
    "mainStyles": "src/styles/main.css - variables, base styles, typography, modals, page layouts",
    "componentStyles": "src/styles/navbar.css and src/styles/footer.css for component isolation",
    "variables": "CSS custom properties in main.css for consistent design system",
    "responsive": "Mobile-first responsive design with structured media queries"
  },
  "developmentProcess": {
    "commands": [
      "pnpm install - install dependencies",
      "pnpm dev - start Vite development server",
      "pnpm build - build for production",
      "pnpm preview - preview production build"
    ],
    "workflow": "1. Edit HTML/CSS/JS files. 2. Test in dev server. 3. Build and preview before deploy.",
    "cssWorkflow": "Use modular CSS files, import through index.css, maintain design system variables"
  },
  "codeStyle": {
    "css": "Use CSS custom properties, semantic class names, component-based organization",
    "javascript": "Vanilla JS with modern ES6+ features, modular component structure",
    "html": "Semantic HTML5, accessibility-focused, consistent structure across pages",
    "comments": "Document complex CSS, explain component behavior, maintain clear code organization"
  },
  "designSystem": {
    "colors": "Warm beige and brown palette defined in CSS custom properties",
    "typography": "System fonts with careful hierarchy and responsive sizing",
    "spacing": "Consistent spacing scale using CSS variables",
    "components": "Reusable button styles, modal system, responsive navigation"
  },
  "businessContext": {
    "industry": "Automotive diagnostics and log analysis",
    "targetAudience": "Automotive engineers, diagnostics professionals, technical teams",
    "keyFeatures": "AI-powered fault detection, plain-language explanations, multi-protocol support (CAN, DoIP, DLT, PCAP)",
    "tone": "Professional, technical, but approachable and user-friendly"
  },
  "errorFixingProcess": "1. Check browser console for errors. 2. Verify CSS import paths and syntax. 3. Test responsive design across devices. 4. Validate HTML and check accessibility. 5. Clear browser cache if needed.",
  "buildingProcess": "1. Use pnpm for all package operations. 2. Test locally with 'pnpm dev'. 3. Build with 'pnpm build'. 4. Preview with 'pnpm preview'. 5. Deploy static files from dist/ folder.",
  "terminalInfo": "User runs Windows PowerShell. Use PowerShell syntax for commands (semicolons, Remove-Item, etc.). Be aware of Windows path separators.",
  "important": [
    "Always use PowerShell syntax for terminal commands",
    "Maintain modular CSS architecture - don't add styles to main.css if they belong in component files",
    "Use index.css as the single entry point for all CSS imports",
    "Keep components reusable and well-documented",
    "Follow responsive design patterns established in the codebase",
    "Maintain the warm beige/brown color scheme using CSS custom properties"
  ],
  "fileOrganization": {
    "styles": "src/styles/ - index.css (entry), main.css (base), navbar.css, footer.css",
    "components": "src/components/ - SharedNavbar.js, SharedFooter.js, WaitlistModal.js",
    "config": "src/config/ - environment and configuration files",
    "assets": "public/ - static images, icons, fonts"
  },
  "comments": [
    "Always document CSS custom properties and their usage",
    "Explain component behavior and API in JavaScript files",
    "Use clear, semantic class names that describe purpose not appearance",
    "Document responsive breakpoints and design decisions",
    "Maintain comments explaining automotive industry context where relevant"
  ]
}
